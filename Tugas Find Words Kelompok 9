//Kelompok 9
//Maura Hellena (2317051105)
//Muhammad Ghozi Pratama (2317051041)
//Meyta Zaskiya (2357051006)

//Dikerjakan oleh Muhammad Ghozi Pratama

#include <iostream>
#include <vector>
#include <string>

using namespace std;

bool findHorizontal(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();

    for (int a = 0; a < baris; ++a) {
        for (int b = 0; b <= kolom - word.length(); ++b) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (matriks[a][b + n] != word[n]) {
                    found = false;
                    break;
                }if (matriks[a][b + n] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}

bool findVertikal(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();
    
    for (int b = 0; b < kolom; ++b) {
        for (int a = 0; a <= baris - word.length(); ++a) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (matriks[a + n][b] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    
for (int b = 0; b < kolom; ++b) {
        for (int a = baris - 1; a >= word.length() - 1; --a) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (matriks[a - n][b] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}

//Dikerjakan Oleh Maura Hellena

bool findDiagonalKananBawah(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();

    for (int a = 0; a <= baris - word.length(); ++a) {
        for (int b = 0; b <= kolom - word.length(); ++b) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (matriks[a + n][b + n] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}
bool findDiagonalKananAtas(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();

    for (int a = word.length() - 1; a < baris; ++a) {
        for (int b = word.length() - 1; b < kolom; ++b) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (a - n < 0 || b - n < 0 || matriks[a - n][b - n] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}
bool findDiagonalKiriBawah(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();

    for (int a = 0; a <= baris - word.length(); ++a) {
        for (int b = word.length() - 1; b < kolom; ++b) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (a + n >= baris || b - n < 0 || matriks[a + n][b - n] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}
bool findDiagonalKiriAtas(const vector<vector<char>>& matriks, const string& word) {
    int baris = matriks.size();
    int kolom = matriks[0].size();

    for (int a = word.length() - 1; a < baris; ++a) {
        for (int b = 0; b <= kolom - word.length(); ++b) {
            bool found = true;
            for (int n = 0; n < word.length(); ++n) {
                if (a - n < 0 || matriks[a - n][b + n] != word[n]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                return true;
            }
        }
    }
    return false;
}

//Dikerjakan Oleh Meyta Zaskiya

bool findWord(const vector<vector<char>>& matriks, const string& word) {
    if (findHorizontal(matriks, word) || findVertikal(matriks, word) || findDiagonalKananBawah(matriks, word) || findDiagonalKiriBawah(matriks, word) || findDiagonalKananAtas(matriks, word) || findDiagonalKiriAtas(matriks, word))
        return true;
    else
        return false;
}
